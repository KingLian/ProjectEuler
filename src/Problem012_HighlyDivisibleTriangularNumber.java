/**
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 * 
 * The first ten terms would be:
 *  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * @author rajabatu
 *
 */
public class Problem012_HighlyDivisibleTriangularNumber {

	public static void main(String[] args) {
		
		int triangle = 1;
		long triangleNumber = 1;
		
		// start from 10000th triangular
//		while (triangle < 15000) 
//		{
//			triangle++;
//			triangleNumber += triangle;
//		}
		
		while (true) 
		{
			System.out.printf("%d: ", triangleNumber);
			
			int counter = 0;
			
			long limit = (long) Math.sqrt(triangleNumber);
			
			for (long i = 1; i <= limit; i++) 
			{
				if (triangleNumber % i == 0) 
				{
					System.out.printf("%d, ", i);
					counter++;
					
					if (i != triangleNumber / i) 
					{
						System.out.printf("%d, ", triangleNumber / i);
						counter++;
					}
				}
			}
			
			if (counter > 500) 
			{
				System.out.println();
				System.out.println("Triangule ke: " + triangle);
				System.out.println("Divisors    : " + counter);
				System.out.println();
				break;
			}
			
			System.out.println();
			System.out.println("Triangule ke: " + triangle);
			System.out.println("Divisors    : " + counter);
			System.out.println();
			
			triangle++;
			triangleNumber += triangle;
			
		}
		
		System.out.println();
		System.out.println();
		System.out.println("Triangular Number: " + triangleNumber);
		
	}

}
